'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodashWrap = require('./util/lodash-wrap');

var _lodashWrap2 = _interopRequireDefault(_lodashWrap);

var _calls = require('./store/calls');

var _calls2 = _interopRequireDefault(_calls);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _stubbings = require('./store/stubbings');

var _stubbings2 = _interopRequireDefault(_stubbings);

var _gatherProps = require('./share/gather-props');

var _gatherProps2 = _interopRequireDefault(_gatherProps);

var _copyProps = require('./share/copy-props');

var _copyProps2 = _interopRequireDefault(_copyProps);

var _filterFunctions = require('./share/filter-functions');

var _filterFunctions2 = _interopRequireDefault(_filterFunctions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (nameOrFunc, __optionalName) {
  return _lodashWrap2.default.isFunction(nameOrFunc) ? createTestDoubleForFunction(nameOrFunc, __optionalName) : createTestDoubleNamed(nameOrFunc || __optionalName);
};

var createTestDoubleForFunction = function createTestDoubleForFunction(func, optionalName) {
  var testDouble = createTestDoubleNamed(func.name || optionalName);
  var propNames = (0, _gatherProps2.default)(func);
  (0, _copyProps2.default)(func, testDouble, propNames);
  _lodashWrap2.default.each((0, _filterFunctions2.default)(func, propNames), function (funcName) {
    var tdName = (func.name || optionalName || '') + '.' + funcName;
    testDouble[funcName] = createTestDoubleNamed(tdName);
  });
  return testDouble;
};

var createTestDoubleNamed = function createTestDoubleNamed(name) {
  return _lodashWrap2.default.tap(createTestDoubleFunction(), function (testDouble) {
    var entry = _store2.default.for(testDouble, true);
    if (name != null) {
      entry.name = name;
      testDouble.toString = function () {
        return '[test double for "' + name + '"]';
      };
    } else {
      testDouble.toString = function () {
        return '[test double (unnamed)]';
      };
    }
  });
};

var createTestDoubleFunction = function createTestDoubleFunction() {
  return function testDouble() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _calls2.default.log(testDouble, args, this);
    return _stubbings2.default.invoke(testDouble, args, this);
  };
};