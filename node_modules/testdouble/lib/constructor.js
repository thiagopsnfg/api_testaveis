'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodashWrap = require('./util/lodash-wrap');

var _lodashWrap2 = _interopRequireDefault(_lodashWrap);

var _function = require('./function');

var _function2 = _interopRequireDefault(_function);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _copyProps = require('./share/copy-props');

var _copyProps2 = _interopRequireDefault(_copyProps);

var _gatherProps = require('./share/gather-props');

var _gatherProps2 = _interopRequireDefault(_gatherProps);

var _filterFunctions = require('./share/filter-functions');

var _filterFunctions2 = _interopRequireDefault(_filterFunctions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (typeOrNames) {
  return _lodashWrap2.default.isFunction(typeOrNames) ? fakeConstructorFromType(typeOrNames) : fakeConstructorFromNames(typeOrNames);
};

var fakeConstructorFromType = function fakeConstructorFromType(type) {
  return _lodashWrap2.default.tap(createFakeType(type), function (fakeType) {
    var name = type.name || '';
    var staticProps = (0, _gatherProps2.default)(type);
    var instanceProps = (0, _gatherProps2.default)(type.prototype);
    (0, _copyProps2.default)(type, fakeType, staticProps);
    (0, _copyProps2.default)(type.prototype, fakeType.prototype, instanceProps);

    // Override "static" functions with instance test doubles
    _lodashWrap2.default.each((0, _filterFunctions2.default)(type, staticProps), function (funcName) {
      fakeType[funcName] = (0, _function2.default)(name + '.' + funcName);
    });

    // Override prototypal functions with instance test doubles
    _lodashWrap2.default.each((0, _filterFunctions2.default)(type.prototype, instanceProps), function (funcName) {
      fakeType.prototype[funcName] = (0, _function2.default)(name + '#' + funcName);
    });

    addToStringMethodsToFakeType(fakeType, name);
  });
};

var createFakeType = function createFakeType(type) {
  var fauxConstructor = (0, _function2.default)((type.name || 'anonymous') + ' constructor');

  if ((0, _config2.default)().extendWhenReplacingConstructors) {
    return function (_type) {
      _inherits(TestDoubleConstructorExtendingRealType, _type);

      function TestDoubleConstructorExtendingRealType() {
        _classCallCheck(this, TestDoubleConstructorExtendingRealType);

        var _this = _possibleConstructorReturn(this, (TestDoubleConstructorExtendingRealType.__proto__ || Object.getPrototypeOf(TestDoubleConstructorExtendingRealType)).apply(this, arguments));

        fauxConstructor.apply(undefined, arguments);
        return _this;
      }

      return TestDoubleConstructorExtendingRealType;
    }(type);
  } else {
    return function TestDoubleConstructor() {
      _classCallCheck(this, TestDoubleConstructor);

      fauxConstructor.apply(undefined, arguments);
    };
  }
};

var fakeConstructorFromNames = function fakeConstructorFromNames(funcNames) {
  return _lodashWrap2.default.tap(function TestDoubleConstructor() {
    _classCallCheck(this, TestDoubleConstructor);
  }, function (cls) {
    _lodashWrap2.default.each(funcNames, function (funcName) {
      cls.prototype[funcName] = (0, _function2.default)('#' + funcName);
    });

    addToStringMethodsToFakeType(cls);
  });
};

var addToStringMethodsToFakeType = function addToStringMethodsToFakeType(fakeType, name) {
  fakeType.toString = function () {
    return '[test double constructor' + (name ? ' for "' + name + '"' : '') + ']';
  };

  fakeType.prototype.toString = function () {
    return '[test double instance of constructor' + (name ? ' "' + name + '"' : '') + ']';
  };
};